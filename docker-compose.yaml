# =============================================================================
# docker-compose.yml — e_commerce_shop
#
# Purpose:
# - Consistent, secure, well-documented orchestration for Django + Celery.
# - Profiles: "prod" (production) and "dev" (local development).
# - Works with Docker Compose v2 and Swarm (uses deploy.*).
#
# Key practices:
# - Secrets via Docker secrets (file-based in Compose; external in Swarm).
# - Read-only rootfs + tmpfs wherever possible.
# - Healthchecks + depends_on:condition for clean startup ordering.
# - Resource limits (deploy.resources) + --compatibility for Compose.
# - The Least privilege (cap_drop ALL, no-new-privileges).
# - x-* anchors to keep things DRY.
#
# Quick usage:
# - DEV:  docker compose --profile dev up --build --compatibility
# - PROD: docker compose --profile prod up -d --build --compatibility
# - Swarm:
#     docker swarm init
#     docker stack deploy -c docker-compose.yml myapp
#
# One-off tasks:
#   docker compose run --rm migrate
#   docker compose run --rm collectstatic
# =============================================================================

name: e_commerce_shop  # optional but recommended for clarity in logs and container names

# ==============================
# Anchors (DRY)
# ==============================

x-env-common: &env_common
  DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-config.settings.prod}
  TZ: ${TZ:-Europe/Warsaw}
  PYTHONUNBUFFERED: "1"

x-logging: &logging_json
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-health-gunicorn: &health_gunicorn
  # App-level healthcheck (expects 2xx from /api/health/)
  test: ["CMD-SHELL", "wget --header='X-Forwarded-Proto: https' -qO- http://127.0.0.1:8000/api/health/ || exit 1"]
  interval: 10s
  timeout: 5s
  retries: 8
  start_period: 45s

x-service-common: &service_common
  # Common runtime settings for most services
  networks: [backend]
  restart: unless-stopped
  logging: *logging_json
  init: true                    # PID 1 reaper to avoid zombies
  stop_grace_period: 30s        # gentler shutdown
  ulimits:
    nofile:
      soft: 4096
      hard: 8192

x-django-common: &django_common
  # Shared settings for Django-based services
  build:
    context: .
    target: runtime
  environment:
    <<: *env_common
    # --- Database (assembled in Django using *_FILE) ---
    DB_NAME: ${POSTGRES_DB:-app}
    DB_USER: ${POSTGRES_USER:-app}
    DB_HOST: db
    DB_PORT: "5432"
    DB_PASSWORD_FILE: /run/secrets/db_password
    # --- Redis (broker/backend; passwords via *_FILE) ---
    REDIS_HOST: redis
    REDIS_PORT: "6379"
    REDIS_DB_BROKER: "0"
    REDIS_DB_BACKEND: "0"
    REDIS_PASSWORD_FILE: /run/secrets/redis_password
  env_file:
    - ${ENV_FILE:-.env}
  depends_on:
    db:
      condition: service_healthy
    redis:
      condition: service_healthy
  read_only: true
  tmpfs: ["/tmp"]
  user: "app"
#  user: "${APP_UID:-1000}:${APP_GID:-1000}"   # alternative via UID/GID
  security_opt:
    - no-new-privileges:true
  cap_drop: [ALL]

# ============
# Services
# ============

services:

  # ---------------------------------------------------------------------------
  # Postgres 16 — persistent data in a volume
  # ---------------------------------------------------------------------------
  db:
    image: postgres:16-alpine
    command: ["postgres"]   # explicit; uses PGDATA below
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      TZ: ${TZ:-Europe/Warsaw}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 15s
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "1.0"
        reservations:
          memory: 512m
    <<: *service_common
    secrets: [db_password]
    profiles: ["prod", "dev"]

  # ---------------------------------------------------------------------------
  # Django + Gunicorn (PROD) — behind Nginx; internal expose only
  # ---------------------------------------------------------------------------
  web:
    <<: [*django_common, *service_common]
    command: >
      /opt/venv/bin/gunicorn config.wsgi:application
      --bind 0.0.0.0:8000
      --workers ${GUNICORN_WORKERS:-3}
      --threads ${GUNICORN_THREADS:-2}
      --timeout ${GUNICORN_TIMEOUT:-30}
      --graceful-timeout ${GUNICORN_GRACEFUL_TIMEOUT:-30}
      --access-logfile -
      --error-logfile -
    expose:
      - "8000"   # internal network only; Nginx terminates HTTP(S)
    volumes:
      - type: volume
        source: media_data
        target: /app/media
        volume: { nocopy: true }
      - type: volume
        source: static_data
        target: /app/staticfiles
        volume: { nocopy: true }
    healthcheck: *health_gunicorn
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "0.75"
        reservations:
          memory: 512m
    secrets: [db_password, redis_password]
    profiles: ["prod"]

  # ---------------------------------------------------------------------------
  # Django + Gunicorn (DEV) — bind-mounted code, longer timeouts
  # ---------------------------------------------------------------------------
  web-dev:
    <<: [*django_common, *service_common]
    command: >
      /opt/venv/bin/gunicorn config.wsgi:application
      --bind 0.0.0.0:8000
      --workers 2
      --threads 2
      --timeout 60
      --graceful-timeout 60
      --access-logfile -
      --error-logfile -
    expose:
      - "8000"
    volumes:
      - type: bind
        source: .
        target: /app
        consistency: cached
      - type: bind
        source: ./media
        target: /app/media
      - type: bind
        source: ./staticfiles
        target: /app/staticfiles
    environment:
      <<: *env_common
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-config.settings.dev}
      # DEV: you can keep using DATABASE_URL instead of secrets
      DATABASE_URL: ${DATABASE_URL:-postgres://$${POSTGRES_USER:-app}:$${POSTGRES_PASSWORD:-app}@db:5432/$${POSTGRES_DB:-app}}
    env_file: [.env.dev]
    healthcheck: *health_gunicorn
    read_only: false         # dev convenience (live reload, etc.)
    profiles: ["dev"]

  # ---------------------------------------------------------------------------
  # Nginx — reverse proxy / serves static & media files
  # ---------------------------------------------------------------------------
  nginx:
    image: nginx:1.27-alpine
    command: ["sh","-lc","exec nginx -g 'daemon off;'"]
    ports:
      - "80:80"
      # - "443:443"   # enable if you terminate TLS here
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_data:/app/staticfiles:ro
      - media_data:/app/media:ro
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "0.5"
        reservations:
          memory: 128m
    user: "101:101"           # nginx user/group from the image; not root
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    cap_drop: [ALL]
    cap_add: ["NET_BIND_SERVICE"]
    <<: *service_common
    profiles: ["prod", "dev"]

  # ---------------------------------------------------------------------------
  # Redis (PROD) — password from secret; no host port exposure
  # ---------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    command:
      - sh
      - -c
      - |
        PASS="$(tr -d '\r\n' < /run/secrets/redis_password)"
        exec redis-server --appendonly yes --requirepass "$$PASS"
    volumes:
      - redis_data:/data
    environment:
      TZ: ${TZ:-Europe/Warsaw}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a \"$(tr -d '\\r\\n' </run/secrets/redis_password)\" ping"]
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: "0.5"
        reservations:
          memory: 256m
    <<: *service_common
    secrets: [redis_password]
    profiles: ["prod"]

  # ---------------------------------------------------------------------------
  # Redis (DEV) — convenient host port 6379
  # ---------------------------------------------------------------------------
  redis-dev:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"   # dev convenience; do not expose in prod
    volumes:
      - redis_data:/data
    environment:
      TZ: ${TZ:-Europe/Warsaw}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: "0.5"
        reservations:
          memory: 256m
    <<: *service_common
    profiles: ["dev"]

  # ---------------------------------------------------------------------------
  # Celery worker — background task processing
  # ---------------------------------------------------------------------------
  worker:
    <<: [*django_common, *service_common]
    command: >
      /opt/venv/bin/celery -A config worker
      -l ${CELERY_LOGLEVEL:-info}
      --concurrency=${CELERY_CONCURRENCY:-4}
      --hostname=${CELERY_WORKER_NAME:-worker@%h}
      --prefetch-multiplier=${CELERY_PREFETCH:-4}
    volumes:
      - media_data:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      web:
        condition: service_started
    healthcheck:
      # Simple no-op; replace with "celery -A config inspect ping" if desired
      test: ["CMD-SHELL", "/opt/venv/bin/python - <<'PY'\nimport sys; sys.exit(0)\nPY"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "0.75"
        reservations:
          memory: 512m
    read_only: true
    tmpfs: ["/tmp"]
    secrets: [db_password, redis_password]
    profiles: ["prod", "dev"]

  # ---------------------------------------------------------------------------
  # Celery beat — task scheduler
  # ---------------------------------------------------------------------------
  beat:
    <<: [*django_common, *service_common]
    command: >
      /opt/venv/bin/celery -A config beat
      -l ${CELERY_LOGLEVEL:-info}
      --schedule /tmp/celerybeat-schedule
      --pidfile /tmp/celerybeat.pid
    volumes:
      - media_data:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      web:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "/opt/venv/bin/python - <<'PY'\nimport sys; sys.exit(0)\nPY"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "0.5"
        reservations:
          memory: 256m
    read_only: true
    tmpfs: ["/tmp"]
    secrets: [db_password, redis_password]
    profiles: ["prod", "dev"]

  # ---------------------------------------------------------------------------
  # One-off: migrate — run DB migrations
  # ---------------------------------------------------------------------------
  migrate:
    <<: [*django_common, *service_common]
    command: /opt/venv/bin/python manage.py migrate --noinput
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    secrets: [db_password]
    profiles: [ "prod", "dev" ]

  # ---------------------------------------------------------------------------
  # One-off: collectstatic — gathers static files (needs CHOWN)
  # ---------------------------------------------------------------------------
  collectstatic:
    <<: [*django_common, *service_common]
    command: >
      sh -lc '
        mkdir -p /app/staticfiles &&
        chown -R app:app /app/staticfiles &&
        exec /opt/venv/bin/python manage.py collectstatic --noinput
      '
    volumes:
      - static_data:/app/staticfiles
    environment:
      - DJANGO_SKIP_CELERY_IMPORT=1
    depends_on:
      web:
        condition: service_started
    read_only: false
    user: "0:0"
    restart: "no"
    security_opt: []
    cap_drop: []
    cap_add: ["CHOWN"]
    secrets: [db_password]
    profiles: ["prod", "dev"]

  # Optional: init-media — initialize media directory ownership
  # init-media:
  #   <<: [*django_common, *service_common]
  #   command: >
  #     sh -lc '
  #       mkdir -p /app/media &&
  #       chown -R app:app /app/media
  #     '
  #   volumes:
  #     - media_data:/app/media
  #   read_only: false
  #   user: "0:0"
  #   restart: "no"
  #   security_opt: []
  #   cap_drop: []
  #   cap_add: ["CHOWN"]
  #   profiles: ["prod", "dev"]


# ============
# Volumes
# ============
volumes:
  redis_data:
  postgres_data:
  media_data:
  static_data:

# ============
# Networks
# ============
networks:
  backend:
    driver: bridge

# ============
# Secrets
# ============
# Compose (non-Swarm): these files must exist locally.
# Swarm: set "external: true" and create via `docker secret create`.
secrets:
  db_password:
    file: ./deploy/secrets/db_password.txt
  redis_password:
    file: ./deploy/secrets/redis_password.txt
